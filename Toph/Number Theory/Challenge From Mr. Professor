///   BISMILLAHIR RAHMANIR RAHEEM
///   ALLAH IS WATCHING ME
///   ALLAH save us from COVID-19.Amin.

///   █▀█─█──█──█▀█─█─█
///   █▄█─█──█──█▄█─█▄█
///   █─█─█▄─█▄─█─█─█─█

///   كُلُّ نَفْسٍ ذَآئِقَةُ الْمَوْت
///   Every soul shall taste death.

/// Tag:: NT

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

///  order_of_key return number of elements less than x.
///  find_by_order return index.

using namespace std;
using namespace __gnu_pbds;


#define MOHAMMAD  ios::sync_with_stdio(0);cin.tie(0);
#define all(x)    (x).begin(), (x).end()
#define AE        cout << fixed << setprecision(10);

int dx8[] = {0, 0, 1, 1, 1, -1, -1, -1}; // 8-direction.......
int dy8[] = {1,-1, 1, -1, 0, 0, -1, 1};
int dx4[]= {1,-1,0,0}; // 4-direction...........
int dy4[]= {0,0,1,-1};

typedef tree< int, null_type, less<int>, rb_tree_tag,tree_order_statistics_node_update> ordered_set;
typedef tree<pair<int, int>,null_type,less<pair<int, int>>,rb_tree_tag,tree_order_statistics_node_update> ordered_multiset;

//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)
//***********************************************  The END **********************************************************************************************************************************
using ll = long long;
const ll N = 1000005;
const ll INF = 1e18;
const ll mod = 999999937LL;
ll fact[N + 1] = { 0 } , ifact[N + 1] = { 0 };

 ll bigmod ( ll a , ll n , ll m ){
       ll res = 1;
       while(n){
               if(n&1) res = ( res * a ) % mod;
               n>>=1;
               a*=a;
               a%=mod;
       }
       return res;
 }

 void factorial ( ){
 fact[0] = ifact[0] = 1;
 for ( ll i = 1 ; i<=N ; ++i ){
      fact[i] = ( ( i % mod ) * ( fact[i-1] % mod ) ) % mod;
      ifact[i] = bigmod ( fact[i] , mod - 2 , mod );   /// using fermat's little theorem.
 }
 }

 ll nCr ( ll n , ll r ){

      ll nu = fact[n];
      ll de = ( ifact[n - r] * ifact[r] ) % mod;

      return ( nu*de ) % mod;
 }


int main()
{

 MOHAMMAD

 factorial ( );

 ll t , tc = 0;
 cin >> t;
 while ( t-- ){

      ll n;
      cin >> n;
      ll arr[n] , sum = 0;
      for ( ll i = 0 ; i<n ; ++i ){
          cin >> arr[i];
          sum+=arr[i];
          sum%=mod;
      }

      if(sum<0)sum+=mod;

      ll tot = 0;
      for ( ll i = 1 ; i*i<=n ; ++i ){

           if(n%i==0){
              ll d1 = i;
              ll d2 = n/i;
              ll times;

              /// An element of a set that can be repeated into a subset in a
              /// certain length is a k-1 choice from n-1 elements (k is the length of the subset).

              times =  ( ( nCr ( n - 1 , d1 - 1 ) % mod ) * ( sum % mod ) ) % mod;
              tot+=times;
              if ( d1!=d2 ) {
                 times =  ( ( nCr ( n - 1 , d2 - 1 ) % mod ) * ( sum % mod ) ) % mod;
                 tot+=times;
              }
              tot%=mod;
           }
      }
      cout << tot << "\n";
 }


}



/*




  Alhamdulillah
*/


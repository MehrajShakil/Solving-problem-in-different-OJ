
///   BISMILLAHIR RAHMANIR RAHEEM
///   ALLAH IS WATCHING ME
///   ALLAH save us from COVID-19.Amin.

///   Every soul shall taste death.

/// Tag ::

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

///  order_of_key return number of elements less than x.
///  find_by_order return index.

using namespace std;
using namespace __gnu_pbds;


#define MOHAMMAD  ios::sync_with_stdio(0);cin.tie(0);
#define all(x)    (x).begin(), (x).end()
#define AE        cout << fixed << setprecision(10);

int dx8[] = {0, 0, 1, 1, 1, -1, -1, -1}; // 8-direction.......
int dy8[] = {1,-1, 1, -1, 0, 0, -1, 1};
int dx4[]= {1,-1,0,0}; // 4-direction...........
int dy4[]= {0,0,1,-1};

typedef tree< int, null_type, less<int>, rb_tree_tag,tree_order_statistics_node_update> ordered_set;
typedef tree<pair<int, int>,null_type,less<pair<int, int>>,rb_tree_tag,tree_order_statistics_node_update> ordered_multiset;

//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)
//***********************************************  The END **********************************************************************************************************************************
using ll = long long;
const ll N = 40;
const ll INF = 1e18;
const ll mod = 1000000007;

void solve ( ){

  ll n , x , mn=INF;
  bool ans = true;

  cin >> n;
  map < ll , ll > a , b , total , common;

  for ( ll i = 0 ; i<n ; ++i ){
       cin >> x;
       a[x]++;
       total[x]++;
       mn = min ( mn , x );
  }
  for ( ll i = 0 ; i<n ; ++i ) {
       cin >> x;
       b[x]++;
       total[x]++;
       mn = min ( mn , x );
  }

  for ( auto it : total ){
       if ( it.second % 2 ) ans = 0;  /// if any elements occur odd times then answer is -1.
  }

  if ( !ans ) cout << "-1\n";
  else{
      ll mini = 0;
      multiset < ll > msa , msb;
      for ( auto it : a ){
           ll value = it.first;
           ll x = it.second;
           common[value] = min ( b[value] , x ); /// find the common elements from the two arrays.
      }
      for ( auto it : a ){
           ll value = it.first;
           a[value]-=common[value];
      }
      for ( auto it : b ){
           ll value = it.first;
           b[value]-=common[value];
      }
      for ( auto it : a ){
           ll x = it.second/2;
           while(x--)msa.insert(it.first);
      }
      for ( auto it : b ){
           ll x = it.second/2;
           while(x--)msb.insert(-it.first);
      }

      while ( msa.size()){
             mini+= min ( 2*mn , min ( *msa.begin() , abs ( *msb.begin() ) ) );
             msa.erase(msa.begin());
             msb.erase(msb.begin());
      }
      cout << mini << "\n";



    // cout << mn << "\n";
  }


}


int main()
{

  MOHAMMAD

 ll t;
 cin  >> t;
 while ( t-- ){
        solve ( );
 }

}


/*




  Alhamdulillah
*/

